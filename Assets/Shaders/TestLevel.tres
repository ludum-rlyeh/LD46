[gd_resource type="ShaderMaterial" load_steps=16 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "CameraViewport"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "ForegroundViewport"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeVectorScalarMix" id=3]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=5]
output_port_for_preview = 0
default_input_values = [ 0, 0.2, 1, 0.4, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "min_radius"

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "max_radius"

[sub_resource type="VisualShaderNodeScalarOp" id=8]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 0.3 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=10]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "transparency"

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDistance" id=13]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVec3Constant" id=14]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShader" id=15]
code = "shader_type canvas_item;
uniform sampler2D CameraViewport : hint_albedo;
uniform sampler2D ForegroundViewport : hint_black_albedo;
uniform float min_radius;
uniform float max_radius;
uniform float transparency;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// TextureUniform:14
	vec3 n_out14p0;
	float n_out14p1;
	{
		vec4 n_tex_read = texture(CameraViewport, n_out4p0.xy);
		n_out14p0 = n_tex_read.rgb;
		n_out14p1 = n_tex_read.a;
	}

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(ForegroundViewport, n_out4p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// ScalarUniform:32
	float n_out32p0 = min_radius;

// ScalarUniform:33
	float n_out33p0 = max_radius;

// Vector:7
	vec3 n_out7p0 = vec3(0.500000, 0.500000, 0.000000);

// Distance:6
	float n_out6p0 = distance(n_out4p0, n_out7p0);

// ScalarSmoothStep:31
	float n_out31p0 = smoothstep(n_out32p0, n_out33p0, n_out6p0);

// ScalarOp:34
	float n_in34p0 = 1.00000;
	float n_out34p0 = n_in34p0 - n_out31p0;

// ScalarUniform:37
	float n_out37p0 = transparency;

// ScalarOp:35
	float n_out35p0 = n_out34p0 * n_out37p0;

// ScalarOp:36
	float n_out36p0 = n_out31p0 + n_out35p0;

// ScalarOp:30
	float n_out30p0 = n_out2p1 * n_out36p0;

// VectorScalarMix:23
	vec3 n_out23p0 = mix(n_out14p0, n_out2p0, n_out30p0);

// Output:0
	COLOR.rgb = n_out23p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 69, -199.75 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1260, 200 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 100, 220 )
nodes/fragment/4/node = SubResource( 12 )
nodes/fragment/4/position = Vector2( -700, 140 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( -640, 320 )
nodes/fragment/7/node = SubResource( 14 )
nodes/fragment/7/position = Vector2( -1060, 280 )
nodes/fragment/14/node = SubResource( 1 )
nodes/fragment/14/position = Vector2( 100, 20 )
nodes/fragment/23/node = SubResource( 3 )
nodes/fragment/23/position = Vector2( 940, 200 )
nodes/fragment/30/node = SubResource( 4 )
nodes/fragment/30/position = Vector2( 720, 280 )
nodes/fragment/31/node = SubResource( 5 )
nodes/fragment/31/position = Vector2( -180, 500 )
nodes/fragment/32/node = SubResource( 6 )
nodes/fragment/32/position = Vector2( -480, 600 )
nodes/fragment/33/node = SubResource( 7 )
nodes/fragment/33/position = Vector2( -480, 680 )
nodes/fragment/34/node = SubResource( 8 )
nodes/fragment/34/position = Vector2( 80, 600 )
nodes/fragment/35/node = SubResource( 9 )
nodes/fragment/35/position = Vector2( 360, 500 )
nodes/fragment/36/node = SubResource( 10 )
nodes/fragment/36/position = Vector2( 640, 620 )
nodes/fragment/37/node = SubResource( 11 )
nodes/fragment/37/position = Vector2( 80, 840 )
nodes/fragment/connections = PoolIntArray( 4, 0, 2, 0, 4, 0, 6, 0, 7, 0, 6, 1, 4, 0, 14, 0, 14, 0, 23, 0, 2, 0, 23, 1, 23, 0, 0, 0, 30, 0, 23, 2, 2, 1, 30, 0, 6, 0, 31, 2, 31, 0, 34, 1, 34, 0, 35, 0, 31, 0, 36, 0, 35, 0, 36, 1, 32, 0, 31, 0, 33, 0, 31, 1, 36, 0, 30, 1, 37, 0, 35, 1 )

[resource]
shader = SubResource( 15 )
shader_param/min_radius = 0.2
shader_param/max_radius = 0.3
shader_param/transparency = 0.3
