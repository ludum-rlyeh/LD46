[gd_scene load_steps=15 format=2]

[ext_resource path="res://Scenes/InGame/Levels/TestLevel.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scenes/InGame/HUD/HUD.tscn" type="PackedScene" id=3]
[ext_resource path="res://Assets/Sounds/p.c.k_-_funky_loop.ogg" type="AudioStream" id=5]

[sub_resource type="GDScript" id=1]
script/source = "extends Control


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	VisualServer.set_default_clear_color(Color(0.0,0.0,0.0,1.0))
	Events.connect(\"set_paused_signal\", self, \"on_active_gray_scale_post_process\")
	
	print(Color(242,30,180)/255.0)
	print(Color(38,120,284)/255.0)
	print(Color(240,44,36)/255.0)
	print(Color(160,33,166)/255.0)
	print(Color(168,33,33)/255.0)
	print(Color(42,236,30)/255.0)
	print(Color(30,164,171)/255.0)
	print(Color(170,171,23)/255.0)
	print(Color(168,102,30)/255.0)
	print(Color(32,166,82)/255.0)
	print(Color(152,106,143)/255.0)
	print(Color(56, 48, 105)/255.0)

func on_active_gray_scale_post_process(var active : bool) -> void:
	$PostProcesses/GrayScale.visible = active

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;
uniform sampler2D ViewportTexture;
uniform vec3 blueNightColor;


void vertex() {
// Output:0

}

float when_eq(float  x, float  y) {
  return 1.0 - abs(sign(x - y));
}

vec3 when_lt(vec3 x, vec3 y) {
  return max(sign(y - x), 0.0);
}

vec3 when_gt(vec3 x, vec3 y) {
  return max(sign(x - y), 0.0);
}

void fragment() {
// Input:2
	vec3 uv = vec3(SCREEN_UV, 0.0);

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(ViewportTexture, uv.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}


	vec3 colors[] = {vec3(0.94902,0.117647,0.705882),
	vec3(0.14902,0.470588,1.113726),
	vec3(0.941176,0.172549,0.141176),
	vec3(0.627451,0.129412,0.65098),
	vec3(0.658824,0.129412,0.129412),
	vec3(0.164706,0.92549,0.117647),
	vec3(0.117647,0.643137,0.670588),
	vec3(0.666667,0.670588,0.090196),
	vec3(0.658824,0.4,0.117647),
	vec3(0.12549,0.65098,0.321569),
	vec3(0.596078,0.415686,0.560784),
	vec3(0.219608,0.188235,0.411765)};
	
	vec3 color = vec3(0.0);
	float a = 0.0;
	for(int i = 0; i < 12; i++)
	{
		vec3 offset = colors[i] - n_out3p0;
		vec3 result = when_lt(offset, vec3(0.01)) * when_gt(offset, vec3(-0.01));
		float r = when_eq(result.x, result.y) *  when_eq(result.z, result.y) * when_eq(result.z, 1.0);
		a += r;
		color += r * colors[i];
	}
	
	// Output:0
	COLOR.rgb = color + (1.0-a) * blueNightColor * n_out3p0;
	COLOR.a = 1.0;

}

void light() {
// Output:0

}
"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/blueNightColor = Vector3( 0.4, 0.4, 0.65 )

[sub_resource type="GDScript" id=11]
script/source = "extends ColorRect

# Called when the node enters the scene tree for the first time.
func _ready():
	self.material.set_shader_param(\"ViewportTexture\", get_viewport().get_texture())
"

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
uniform_name = "ViewportTexture"

[sub_resource type="VisualShaderNodeVec3Constant" id=4]
constant = Vector3( 0.21, 0.71, 0.07 )

[sub_resource type="VisualShaderNodeDotProduct" id=5]

[sub_resource type="VisualShader" id=6]
code = "shader_type canvas_item;
uniform sampler2D ViewportTexture;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// TextureUniform:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 n_tex_read = texture(ViewportTexture, n_out3p0.xy);
		n_out5p0 = n_tex_read.rgb;
		n_out5p1 = n_tex_read.a;
	}

// Vector:6
	vec3 n_out6p0 = vec3(0.210000, 0.710000, 0.070000);

// DotProduct:8
	float n_out8p0 = dot(n_out5p0, n_out6p0);

// Output:0
	COLOR.rgb = vec3(n_out8p0);

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1000, 80 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 80, 160 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 420, 140 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( 280, 360 )
nodes/fragment/8/node = SubResource( 5 )
nodes/fragment/8/position = Vector2( 720, 240 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 6, 0, 8, 1, 5, 0, 8, 0, 8, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )

[sub_resource type="GDScript" id=8]
script/source = "extends ColorRect


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	self.material.set_shader_param(\"ViewportTexture\", get_viewport().get_texture())
"

[node name="Game" type="Control"]
pause_mode = 1
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ViewportContainer" type="ViewportContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
stretch = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1024, 600 )
transparent_bg = true
handle_input_locally = false
hdr = false
render_target_update_mode = 3

[node name="Map0" parent="ViewportContainer/Viewport" instance=ExtResource( 1 )]

[node name="HUD" parent="ViewportContainer/Viewport" instance=ExtResource( 3 )]

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = -5.0
autoplay = true

[node name="PostProcesses" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 1.16638
margin_right = 1.16638
__meta__ = {
"_edit_use_anchors_": false
}

[node name="NightFilter" type="ColorRect" parent="PostProcesses"]
material = SubResource( 10 )
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 11 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="GrayScale" type="ColorRect" parent="PostProcesses"]
visible = false
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 8 )
__meta__ = {
"_edit_use_anchors_": false
}
