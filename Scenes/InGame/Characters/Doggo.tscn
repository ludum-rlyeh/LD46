[gd_scene load_steps=36 format=2]

[ext_resource path="res://Assets/Sprites/Sheets/Dog.png" type="Texture" id=1]
[ext_resource path="res://Assets/Sounds/dog_barking.wav" type="AudioStream" id=2]
[ext_resource path="res://Assets/Sounds/mud02.wav" type="AudioStream" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

export (float) var speed = 200.0
export (float) var offset_zoom = 0.01

var attract = Vector2.ZERO

# Called when the node enters the scene tree for the first time.
func _ready():
	Events.connect(\"died_signal\",self,\"on_died_signal\")
	Events.emit_signal(\"moved_signal\", self.position, Vector2(0,0))
	Events.connect(\"set_begin_position_signal\", self, \"_on_set_begin_position\")
	Events.connect(\"stop_signal\",self,\"on_stop_signal\")
	
	add_to_group(\"doggo\")
	
	
func _on_set_begin_position(pos : Vector2) -> void:
	position = pos + Vector2(50.0,0.0)

func _input(event : InputEvent):
	if event.is_action_pressed(\"ui_accept\"):
		$BarkAudioPlayer2D.play()

func _physics_process(delta : float):
	var velocity = _update_animation_and_velocity()
	
	velocity = _update_velocity_attraction_seeker(velocity)
	
	_update_displacement(velocity, delta)
	
	_update_sounds(velocity)
	
	_get_zoom_input()
	
	print(position)
	print(global_position)
	Events.emit_signal(\"moved_signal\", self.position)
	Events.emit_signal(\"camera_moved_signal\", self.position - get_viewport().size * 0.5)
	
func _update_animation_and_velocity() -> Vector2:
	var velocity = Vector2.ZERO
		
	if Input.is_action_pressed(\"ui_down\"):
		$AnimatedSprite.animation = \"down\"
		if $AnimatedSprite.flip_h: $AnimatedSprite.flip_h = false
		velocity.y += 1.0
	elif Input.is_action_pressed(\"ui_up\"):
		$AnimatedSprite.animation = \"up\"
		if $AnimatedSprite.flip_h: $AnimatedSprite.flip_h = false
		velocity.y -= 1.0			
	if Input.is_action_pressed(\"ui_right\"):
		if not (Input.is_action_pressed(\"ui_down\") or Input.is_action_pressed(\"ui_up\")):
			$AnimatedSprite.animation = \"right\"
			if $AnimatedSprite.flip_h: $AnimatedSprite.flip_h = false
		velocity.x += 1.0
	elif Input.is_action_pressed(\"ui_left\"):
		if not (Input.is_action_pressed(\"ui_down\") or Input.is_action_pressed(\"ui_up\")):
			$AnimatedSprite.animation = \"right\"
			if not $AnimatedSprite.flip_h: $AnimatedSprite.flip_h = true
		velocity.x -= 1.0

	return velocity.normalized() * speed
		
func _update_velocity_attraction_seeker(velocity : Vector2) -> Vector2:
	# Doggo tracted by the human
	if attract != Vector2.ZERO :
		velocity += attract
		# TODO: animation attracted
	return velocity
	
	
func _update_displacement(velocity : Vector2, delta : float) -> void:
	var old_position = position
	var collision = self.move_and_collide(velocity * delta)
	if collision :
		if collision.collider.get_name() == \"BlindGuy\":
			collision.collider.move_and_collide(velocity.normalized())
		else:
			self.move_and_slide(velocity.slide(collision.normal))
		
func _update_sounds(velocity : Vector2):
	if velocity != Vector2.ZERO:
		if not $WalkAudioPlayer2D.playing:
			$WalkAudioPlayer2D.play()
	else:
		if not $AnimatedSprite.animation.begins_with(\"wait_\"):
			$AnimatedSprite.animation = \"wait_\" + $AnimatedSprite.animation
			
func _get_zoom_input() -> void:
	if Input.is_action_pressed(\"ui_zoom_in\"):
			$Camera2D.zoom -= Vector2(offset_zoom, offset_zoom)
	elif Input.is_action_pressed(\"ui_zoom_out\"):
		$Camera2D.zoom += Vector2(offset_zoom, offset_zoom)

func set_attract(var attract) -> void:
	self.attract = attract
	
func on_stop_signal(var body_id) -> void:
		set_physics_process(false)
		set_block_signals(true)
		
func on_died_signal(var body_id, var type):
	if body_id == self.get_instance_id():
		# TODO: Animation
		Events.emit_signal(\"game_over_signal\", Enums.GAME_OVER_TYPE.DOGGO_DIED)
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 27.1442, 30.0128 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float radius = 4.0;

void fragment() {
	vec4 col = texture(TEXTURE, UV);
	vec2 ps = TEXTURE_PIXEL_SIZE;

	col += texture(TEXTURE, UV + vec2(0.0, -radius) * ps);
	col += texture(TEXTURE, UV + vec2(0.0, radius) * ps);
	col += texture(TEXTURE, UV + vec2(-radius, 0.0) * ps);
	col += texture(TEXTURE, UV + vec2(radius, 0.0) * ps);
	col /= 5.0;

	COLOR = col;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/radius = 4.0

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 1 )
region = Rect2( 0, 0, 128, 128 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 1 )
region = Rect2( 128, 0, 128, 128 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 1 )
region = Rect2( 256, 0, 128, 128 )

[sub_resource type="AtlasTexture" id=8]
atlas = ExtResource( 1 )
region = Rect2( 384, 0, 128, 128 )

[sub_resource type="AtlasTexture" id=9]
atlas = ExtResource( 1 )
region = Rect2( 384, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=10]
atlas = ExtResource( 1 )
region = Rect2( 512, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=11]
atlas = ExtResource( 1 )
region = Rect2( 0, 256, 128, 128 )

[sub_resource type="AtlasTexture" id=12]
atlas = ExtResource( 1 )
region = Rect2( 128, 256, 128, 128 )

[sub_resource type="AtlasTexture" id=13]
atlas = ExtResource( 1 )
region = Rect2( 128, 384, 128, 128 )

[sub_resource type="AtlasTexture" id=14]
atlas = ExtResource( 1 )
region = Rect2( 256, 384, 128, 128 )

[sub_resource type="AtlasTexture" id=15]
atlas = ExtResource( 1 )
region = Rect2( 384, 384, 128, 128 )

[sub_resource type="AtlasTexture" id=16]
atlas = ExtResource( 1 )
region = Rect2( 512, 384, 128, 128 )

[sub_resource type="AtlasTexture" id=17]
atlas = ExtResource( 1 )
region = Rect2( 512, 0, 128, 128 )

[sub_resource type="AtlasTexture" id=18]
atlas = ExtResource( 1 )
region = Rect2( 0, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=19]
atlas = ExtResource( 1 )
region = Rect2( 128, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=20]
atlas = ExtResource( 1 )
region = Rect2( 256, 128, 128, 128 )

[sub_resource type="AtlasTexture" id=21]
atlas = ExtResource( 1 )
region = Rect2( 0, 512, 128, 128 )

[sub_resource type="AtlasTexture" id=22]
atlas = ExtResource( 1 )
region = Rect2( 128, 512, 128, 128 )

[sub_resource type="AtlasTexture" id=23]
atlas = ExtResource( 1 )
region = Rect2( 256, 512, 128, 128 )

[sub_resource type="AtlasTexture" id=24]
atlas = ExtResource( 1 )
region = Rect2( 384, 512, 128, 128 )

[sub_resource type="AtlasTexture" id=25]
atlas = ExtResource( 1 )
region = Rect2( 256, 256, 128, 128 )

[sub_resource type="AtlasTexture" id=26]
atlas = ExtResource( 1 )
region = Rect2( 384, 256, 128, 128 )

[sub_resource type="AtlasTexture" id=27]
atlas = ExtResource( 1 )
region = Rect2( 512, 256, 128, 128 )

[sub_resource type="AtlasTexture" id=28]
atlas = ExtResource( 1 )
region = Rect2( 0, 384, 128, 128 )

[sub_resource type="SpriteFrames" id=29]
animations = [ {
"frames": [ SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ) ],
"loop": true,
"name": "right",
"speed": 5.0
}, {
"frames": [ SubResource( 9 ), SubResource( 10 ), SubResource( 11 ), SubResource( 12 ) ],
"loop": true,
"name": "up",
"speed": 5.0
}, {
"frames": [ SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ) ],
"loop": true,
"name": "wait_down",
"speed": 5.0
}, {
"frames": [ SubResource( 17 ), SubResource( 18 ), SubResource( 19 ), SubResource( 20 ) ],
"loop": true,
"name": "down",
"speed": 5.0
}, {
"frames": [ SubResource( 21 ), SubResource( 22 ), SubResource( 23 ), SubResource( 24 ) ],
"loop": true,
"name": "wait_up",
"speed": 5.0
}, {
"frames": [ SubResource( 25 ), SubResource( 26 ), SubResource( 27 ), SubResource( 28 ) ],
"loop": true,
"name": "wait_right",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=30]
script/source = "extends AnimatedSprite



# Called when the node enters the scene tree for the first time.
func _ready():
	self.play(\"wait_down\")


"

[sub_resource type="AudioStreamRandomPitch" id=31]
audio_stream = ExtResource( 2 )

[sub_resource type="AudioStreamRandomPitch" id=32]
audio_stream = ExtResource( 3 )

[node name="Doggo" type="KinematicBody2D"]
collision_layer = 10
collision_mask = 7
script = SubResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="Shadow" type="AnimatedSprite" parent="."]
visible = false
modulate = Color( 0, 0, 0, 0.545098 )
material = SubResource( 4 )
position = Vector2( 21.0153, 19.1292 )
rotation = 2.01411
frames = SubResource( 29 )
animation = "wait_up"
frame = 2
playing = true
script = SubResource( 30 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
frames = SubResource( 29 )
animation = "wait_up"
frame = 2
playing = true
script = SubResource( 30 )

[node name="BarkAudioPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = SubResource( 31 )

[node name="WalkAudioPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = SubResource( 32 )
volume_db = 1.0

[node name="Camera2D" type="Camera2D" parent="."]
current = true
