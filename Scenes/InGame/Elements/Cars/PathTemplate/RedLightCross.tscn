[gd_scene load_steps=4 format=2]

[ext_resource path="res://Scripts/Map/RedLights/BreakArea.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]
resource_name = "RedLight"
script/source = "extends Node2D


export (Enums.RED_LIGHT_COLOR) var color = Enums.RED_LIGHT_COLOR.RED
export (float) var time_red = 10.0
export (float) var time_orange = 2.0
export (float) var time_green = 10.0
export (float) var time_warning = 1.0
export (Enums.RED_LIGHT_MODE) var _state 
export (bool) var force_red_light = false
var _timer : Timer
	
export (bool) var Debug = false
	
# Called when the node enters the scene tree for the first time.
func _ready():
	if force_red_light:
		_set_enable_all_break_zones(true)
	else:
		_timer = Timer.new()
		add_child(_timer)
		_timer.connect(\"timeout\", self, \"_on_timer_finished\")
		_timer.wait_time = time_red
		_timer.one_shot = true
		_timer.start()
		
func _next_color() -> void:
	match color:
		Enums.RED_LIGHT_COLOR.RED:
			color = Enums.RED_LIGHT_COLOR.GREEN
			_timer.wait_time = time_green
			_next_enable_opposite_break_zone()
			if Debug: print(\"Pass to green\")
		Enums.RED_LIGHT_COLOR.GREEN:
			color = Enums.RED_LIGHT_COLOR.ORANGE
			_timer.wait_time = time_orange
			if Debug: print(\"Pass to orange\")	
		_:
			color = Enums.RED_LIGHT_COLOR.RED
			_timer.wait_time = time_red
			_next_enable_opposite_break_zone()
			if Debug: print(\"Pass to red\")
	_timer.start()
			
func _next_warning() -> void:
	match color:
		Enums.RED_LIGHT_COLOR.ORANGE:
			color = Enums.RED_LIGHT_COLOR.NO_COLOR
		_:
			color = Enums.RED_LIGHT_COLOR.ORANGE
	_timer.wait_time = time_warning
	_timer.start()
	
func change_state(var state) -> void:
	_state = state
	_on_timer_finished()

func _next_enable_opposite_break_zone():
	var enable = false
	if $BreakZones/BreakZone.visible:
		enable = true
	$BreakZones/BreakZone3.visible = enable
	$BreakZones/BreakZone4.visible = enable
	$BreakZones/BreakZone.visible = !enable
	$BreakZones/BreakZone2.visible = !enable
	
	if Debug:
		print(\"Red light : BreakZone 1 and 2 : \", $BreakZones/BreakZone.visible)
		print(\"Red light : BreakZone 3 and 4 : \", $BreakZones/BreakZone.visible)
		
func _set_enable_all_break_zones(var enable : bool):
	for child in $BreakZones.get_children():
		child.Monitorable = enable
	
func _on_timer_finished() -> void:
	if Debug : print(\"Timer red light finished\")
	match _state:
		Enums.RED_LIGHT_MODE.NORMAL:
			_next_color()
		Enums.RED_LIGHT_MODE.WARNING:
			_next_warning()
			_set_enable_all_break_zones(false)
			
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 40, 56 )

[node name="RedLightCross" type="Node2D"]
script = SubResource( 1 )

[node name="BreakZones" type="Node2D" parent="."]

[node name="BreakZone" type="Area2D" parent="BreakZones"]
monitoring = false
collision_layer = 16
collision_mask = 0
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BreakZones/BreakZone"]
rotation = 3.14159
shape = SubResource( 2 )
one_way_collision = true

[node name="BreakZone2" type="Area2D" parent="BreakZones"]
position = Vector2( 144, 600 )
rotation = 3.14159
monitoring = false
collision_layer = 16
collision_mask = 0
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BreakZones/BreakZone2"]
rotation = 3.14159
shape = SubResource( 2 )
one_way_collision = true

[node name="BreakZone3" type="Area2D" parent="BreakZones"]
position = Vector2( -248, 368 )
rotation = -1.5708
monitoring = false
collision_layer = 16
collision_mask = 0
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BreakZones/BreakZone3"]
rotation = 3.14159
shape = SubResource( 2 )
one_way_collision = true

[node name="BreakZone4" type="Area2D" parent="BreakZones"]
position = Vector2( 376, 224 )
rotation = 1.5708
monitoring = false
collision_layer = 16
collision_mask = 0
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BreakZones/BreakZone4"]
rotation = 3.14159
shape = SubResource( 2 )
one_way_collision = true
