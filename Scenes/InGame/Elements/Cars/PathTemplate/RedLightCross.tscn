[gd_scene load_steps=4 format=2]

[ext_resource path="res://Scripts/Map/RedLights/BreakArea.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]
resource_name = "RedLight"
script/source = "extends Node2D


export (Enums.RED_LIGHT_COLOR) var color = Enums.RED_LIGHT_COLOR.RED
export (float) var time_orange = 2.0
export (float) var time_green = 10.0
export (float) var time_warning = 1.0
export (Enums.RED_LIGHT_MODE) var _state 
export (bool) var force_red_light = false
var _timer : Timer

var _red_lights : Array
	
export (bool) var Debug = false
	
# Called when the node enters the scene tree for the first time.
#func _ready():
#	if force_red_light:
#		_set_enable_all_break_zones(true)
#	else:
#		_timer = Timer.new()
#		add_child(_timer)
#		_timer.connect(\"timeout\", self, \"_on_timer_finished\")
#		_timer.wait_time = time_red
#		_timer.one_shot = true
#		_timer.start()
		
#	_red_lights[\"red_light_right\"] = {\"break_zone\" : $BreakZones/RightBreakZone/CollisionShape2D, \"sprite\" : null}
#	_red_lights[\"red_light_left\"] = {\"break_zone\" : $BreakZones/LeftBreakZone/CollisionShape2D, \"sprite\" : null}
#	_red_lights[\"red_light_up\"] = {\"break_zone\" : $BreakZones/UpBreakZone/CollisionShape2D, \"sprite\" : null}
#	_red_lights[\"red_light_down\"] = {\"break_zone\" : $BreakZones/DownBreakZone/CollisionShape2D, \"sprite\" : null}
#	_scan_red_lights()
	
#func _detect_red_lights():
#	for child in get_children() :
#		match red_light.get_name():
#			\"RedLightRight\":
#				_red_lights.red_light_right.sprite = red_light
#			\"RedLightLeft\":
#				_red_lights.red_light_left.sprite = red_light
#			\"RedLightUp\":
#				_red_lights.red_light_up.sprite = red_light
#			\"RedLightDown\":
#				_red_lights.red_light_down.sprite = red_light
#
#
#func _next_color() -> void:
#	match color:
#		Enums.RED_LIGHT_COLOR.RED:
#			color = Enums.RED_LIGHT_COLOR.GREEN
#			_timer.wait_time = time_green
#			_next_enable_opposite_break_zone()
#			if Debug: print(\"Pass to green\")
#		Enums.RED_LIGHT_COLOR.GREEN:
#			color = Enums.RED_LIGHT_COLOR.ORANGE
#			_timer.wait_time = time_orange
#
#			if Debug: print(\"Pass to orange\")	
#		_:
#			color = Enums.RED_LIGHT_COLOR.RED
#			_timer.wait_time = time_red
#			_next_enable_opposite_break_zone()
#			if Debug: print(\"Pass to red\")
#	_timer.start()
#
#func _next_warning() -> void:
#	match color:
#		Enums.RED_LIGHT_COLOR.ORANGE:
#			color = Enums.RED_LIGHT_COLOR.NO_COLOR
#		_:
#			color = Enums.RED_LIGHT_COLOR.ORANGE
#	_timer.wait_time = time_warning
#	_timer.start()
#
#func change_state(var state) -> void:
#	_state = state
#	_on_timer_finished()
#
#func _next_enable_opposite_break_zone():
#	var enable = false
#	if vertical_red_lights[0].get_children()[0].disabled:
#		enable = true
#	horizontal_red_lights[0].disabled = enable
#	horizontal_red_lights[1].disabled = enable
#	vertical_red_lights[0].disabled = !enable
#	vertical_red_lights[1].disabled = !enable
#
#	if Debug:
#		print(\"Red light : BreakZone vertical : \", vertical_red_lights[0].disabled)
#		print(\"Red light : BreakZone horizontal : \", horizontal_red_lights[1].disabled.disabled)
#
#func _set_enable_all_break_zones(var enable : bool):
#	for child in $BreakZones.get_children():
#		child.visible = enable
#
#func _on_timer_finished() -> void:
#	if Debug : print(\"Timer red light finished\")
#	match _state:
#		Enums.RED_LIGHT_MODE.NORMAL:
#			_next_color()
#		Enums.RED_LIGHT_MODE.WARNING:
#			_next_warning()
#			_set_enable_all_break_zones(false)
			
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 40, 56 )

[node name="RedLightCross" type="Node2D"]
script = SubResource( 1 )

[node name="BreakZone1" type="Node2D" parent="."]

[node name="UpBreakZone" type="Area2D" parent="BreakZone1"]
monitoring = false
collision_layer = 0
collision_mask = 32
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BreakZone1/UpBreakZone"]
rotation = 3.14159
shape = SubResource( 2 )
one_way_collision = true

[node name="DownBreakZone" type="Area2D" parent="BreakZone1"]
position = Vector2( 144, 600 )
rotation = 3.14159
monitoring = false
collision_layer = 0
collision_mask = 32
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BreakZone1/DownBreakZone"]
rotation = 3.14159
shape = SubResource( 2 )
one_way_collision = true

[node name="BreakZone2" type="Node2D" parent="."]

[node name="LeftBreakZone" type="Area2D" parent="BreakZone2"]
position = Vector2( -248, 368 )
rotation = -1.5708
monitoring = false
collision_layer = 0
collision_mask = 32
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BreakZone2/LeftBreakZone"]
rotation = 3.14159
shape = SubResource( 2 )
one_way_collision = true

[node name="RightBreakZone" type="Area2D" parent="BreakZone2"]
position = Vector2( 376, 224 )
rotation = 1.5708
monitoring = false
collision_layer = 0
collision_mask = 32
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="BreakZone2/RightBreakZone"]
rotation = 3.14159
shape = SubResource( 2 )
one_way_collision = true
