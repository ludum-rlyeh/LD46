[gd_scene load_steps=3 format=2]

[ext_resource path="res://Assets/Sprites/TileMap/BG.tres" type="TileSet" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

const UP = Vector2(0.0,-1.0)
const DOWN = Vector2(0.0,1.0)
const LEFT = Vector2(-1.0,0.0)
const RIGHT = Vector2(1.0,0.0)
const UP_RIGHT = UP + RIGHT
const UP_LEFT = UP + LEFT
const DOWN_RIGHT = DOWN + RIGHT
const DOWN_LEFT = DOWN + LEFT
const DIRS = [UP, DOWN, LEFT, RIGHT, UP_RIGHT, UP_LEFT, DOWN_RIGHT, DOWN_LEFT]

var compatibilities = []
var weights = {}

const output_size = Vector2(32,19)
var possible_tiles
var output_matrix = []

var rng = RandomNumberGenerator.new()

const OVERLAP = false # set true to overlap matrix input

# Called when the node enters the scene tree for the first time.
func _ready():
	# Set seed
	#rng.randomize() # generate a time-based seed
	rng.seed = 42
	print_debug(\"Seed: \" + String(rng.seed))
	
	# Get Input info
	var rect = $Input.get_used_rect()
	var width = rect.size.x
	var height = rect.size.y
	
	# Init weights and compatibilities
	for x in range(width) :
		for y in range(height) :
			var tile = $Input.get_cell(x,y)
			if tile != TileMap.INVALID_CELL: # just in case
				
				var x_flip = $Input.is_cell_x_flipped(x,y)
				var y_flip = $Input.is_cell_y_flipped(x,y)
				var transposed = $Input.is_cell_transposed(x,y)
				var cell = [tile, x_flip, y_flip, transposed]
				
				# Update weights
				if not cell in weights :
					weights[cell] = 0
				weights[cell] += 1
				
				# Update compatibilities
				for dir in DIRS:
					var pos = Vector2(x,y) + dir
					
					if OVERLAP :
						if pos.x < 0 :
							pos.x = width-1
						elif pos.x >= width:
							pos.x = 0
						if pos.y < 0 :
							pos.y = height-1
						elif pos.y >= height:
							pos.y = 0
					
					# Check if possible pos
					if pos.x >= 0 and pos.x < width and pos.y >= 0 and pos.y < height:
						var pos_tile = $Input.get_cell(pos.x,pos.y)
						if pos_tile != TileMap.INVALID_CELL: # just in case
							var pos_x_flip = $Input.is_cell_x_flipped(pos.x,pos.y)
							var pos_y_flip = $Input.is_cell_y_flipped(pos.x,pos.y)
							var pos_transposed = $Input.is_cell_transposed(pos.x,pos.y)
							var pos_cell = [pos_tile, pos_x_flip, pos_y_flip, pos_transposed]
							var compatibility = [cell,pos_cell,dir]
							if not compatibility in compatibilities:
								compatibilities.append(compatibility)
	
	# Init output matrix
	possible_tiles = weights.keys()
	for x in range(output_size.x):
		output_matrix.append([])
		output_matrix[x] = []
		for y in range(output_size.y):
			output_matrix[x].append([])
			output_matrix[x][y] = possible_tiles.duplicate()
			
			
	#set_process(false)

func _process(delta):
	update_output()
	if is_fully_collapsed():
		set_process(false)
	else:
		var pos = get_min_entropy_pos()
		# collapse possibilities at pos
		collapse(pos)
		# propagate consequences of this collapse
		propagate(pos)

# Parse matrix and return cell pos with min entropy
func get_min_entropy_pos():
	var min_entropy = INF;
	var min_entropy_pos = Vector2.ZERO;
	
	# parse positions in output matrix
	for x in range(output_size.x):
		for y in range(output_size.y):
			# If not yet collapsed
			if output_matrix[x][y].size() > 1 :
				# Get entropy
				var entropy = shannon_entropy(x,y)
				# Add some noise?
				entropy = entropy - (rng.randf() / 1000)
				if entropy < min_entropy:
					min_entropy = entropy
					min_entropy_pos = Vector2(x,y)
	
	return min_entropy_pos

# Collapse possibilities of a pos in output matrix
func collapse(var pos):
	# Get possiblities
	var possibilities = output_matrix[pos.x][pos.y]
	
	# Get sum of possibilitiesâ€™ weights
	var sum_weights = 0.0
	for tile in possibilities:
		sum_weights += weights[tile]
	
	# Choose a tile
	var rand = rng.randf() * sum_weights
	var chosen = null
	for tile in possibilities:
		rand -= weights[tile]
		if rand < 0 :
			chosen = tile
			break
	
	# Collapse possibilities at pos to only the chosen tile
	output_matrix[pos.x][pos.y] = [chosen]

# Propagate the consequences of a collapse (like a wave)
func propagate(var pos):
	var stack = [pos]
	while stack.size() > 0:
		# Get pos at the top of stack
		var c_pos = stack.pop_front()
		
		# Get possibile tile at pos
		var c_possibilities = output_matrix[c_pos.x][c_pos.y]
		
		# Check each directions
		for dir in DIRS :
			var o_pos = c_pos + dir
			
			# If pos is valid
			if o_pos.x >= 0 and o_pos.x < output_size.x and o_pos.y >= 0 and o_pos.y < output_size.y:
				
				# Check possibilities at o_pos (if many)
				var o_possibilities = output_matrix[o_pos.x][o_pos.y].duplicate()
				if o_possibilities.size() > 1:
					for o_tile in o_possibilities:
						# check if o_tile compatible with any tile at c_pos
						var o_tile_possible = false
						for c_tile in c_possibilities:
							if [c_tile, o_tile, dir] in compatibilities:
								o_tile_possible = true
								break
						
						# If no compatibility found
						if not o_tile_possible:
							# We collapse possibilities of o_pos
							if output_matrix[o_pos.x][o_pos.y].size() > 1:
								output_matrix[o_pos.x][o_pos.y].erase(o_tile)
								
								# And we add o_pos to the stack for propagation
								stack.append(o_pos)
							else :
								print_debug(\"ERROR: tried to remove last possibility of pos \" + String(o_pos) + \", please rethink your Input\")

# Compute shannon entropy
func shannon_entropy(var x, var y):
	var sum_weights = 0.0
	var sum_weights_log_weights = 0.0
	
	# parse weights current possibilities for this position
	for tile in output_matrix[x][y]:
		var weight = weights[tile]
		sum_weights += weight
		sum_weights_log_weights += weight * log(weight)
	
	return log(sum_weights) - (sum_weights_log_weights / sum_weights)

# Check if matrix is fully collapsed or not
func is_fully_collapsed():
	for x in range(output_size.x):
		for y in range(output_size.y):
			if output_matrix[x][y].size() > 1:
				return false
	
	return true

# Update Output with collapsed tiles
func update_output():
	for x in range(output_size.x):
		for y in range(output_size.y):
			var cell = [-1,false,false,false]
			if output_matrix[x][y].size() == 1:
				cell = output_matrix[x][y][0]
			$Output.set_cell(x,y,cell[0],cell[1],cell[2],cell[3])
"

[node name="TestWaveCollapse" type="Node2D"]
scale = Vector2( 0.25, 0.25 )
script = SubResource( 1 )

[node name="Input" type="TileMap" parent="."]
visible = false
position = Vector2( -1, 0 )
tile_set = ExtResource( 1 )
cell_size = Vector2( 128, 128 )
format = 1
tile_data = PoolIntArray( 0, 103, 0, 1, 103, 0, 2, 103, 0, 3, 105, 0, 4, 103, 0, 5, 105, 0, 6, 110, 0, 7, 103, 0, 8, 110, 0, 9, 103, 0, 10, 103, 0, 11, 110, 0, 12, 105, 0, 13, 103, 0, 14, 110, 0, 15, 103, 0, 16, 105, 0, 65536, 105, 0, 65537, 110, 0, 65538, 129, 0, 65539, 129, 0, 65540, 103, 0, 65541, 105, 0, 65542, 129, 0, 65543, 129, 0, 65544, 105, 0, 65545, 129, 0, 65546, 106, 0, 65547, 103, 0, 65548, 129, 0, 65549, 129, 0, 65550, 103, 0, 65551, 106, 0, 65552, 105, 0, 131072, 110, 0, 131073, 103, 0, 131074, 129, 0, 131075, 27, 0, 131076, 27, 0, 131077, 28, 0, 131078, 27, 0, 131079, 27, 0, 131080, 27, 0, 131081, 27, 0, 131082, 27, 0, 131083, 28, 0, 131084, 27, 0, 131085, 27, 0, 131086, 129, 0, 131087, 103, 0, 131088, 110, 0, 196608, 110, 0, 196609, 129, 0, 196610, 29, 0, 196611, 126, 0, 196612, -1610612625, 0, 196613, -1610612625, 0, 196614, -1610612625, 0, 196615, -1610612625, 0, 196616, -1610612625, 0, 196617, -1610612625, 0, 196618, -1610612625, 0, 196619, -1610612625, 0, 196620, -1610612625, 0, 196621, -1610612610, 0, 196622, 536870941, 0, 196623, 129, 0, 196624, 110, 0, 262144, 103, 0, 262145, 103, 0, 262146, 29, 0, 262147, 111, 0, 262148, -1073741708, 0, 262149, -1073741713, 0, 262150, -1073741713, 0, 262151, -1073741713, 0, 262152, 116, 0, 262153, -1073741708, 0, 262154, -1073741713, 0, 262155, -1073741713, 0, 262156, 116, 0, 262157, 1610612847, 0, 262158, 536870941, 0, 262159, 129, 0, 262160, 103, 0, 327680, 103, 0, 327681, 129, 0, 327682, 29, 0, 327683, 111, 0, 327684, 1610612847, 0, 327685, 1610612767, 0, 327686, -1073741795, 0, 327687, -1073741793, 0, 327688, 111, 0, 327689, 536871023, 0, 327690, 1610612767, 0, 327691, -1073741793, 0, 327692, 111, 0, 327693, 1610612847, 0, 327694, 536870941, 0, 327695, 129, 0, 327696, 105, 0, 393216, 103, 0, 393217, 129, 0, 393218, 29, 0, 393219, 111, 0, 393220, 1610612847, 0, 393221, 1610612765, 0, 393222, 129, 0, 393223, 29, 0, 393224, 111, 0, 393225, 536871023, 0, 393226, 536870941, 0, 393227, 29, 0, 393228, 111, 0, 393229, 1610612847, 0, 393230, 536870941, 0, 393231, 129, 0, 393232, 103, 0, 458752, 105, 0, 458753, 106, 0, 458754, 29, 0, 458755, 111, 0, 458756, 1610612847, 0, 458757, 1610612765, 0, 458758, 129, 0, 458759, 29, 0, 458760, 111, 0, 458761, 536871023, 0, 458762, 536870941, 0, 458763, 29, 0, 458764, 111, 0, 458765, 1610612847, 0, 458766, 536870941, 0, 458767, 129, 0, 458768, 103, 0, 524288, 110, 0, 524289, 129, 0, 524290, 29, 0, 524291, 111, 0, 524292, 1610612847, 0, 524293, 1610612765, 0, 524294, 129, 0, 524295, 29, 0, 524296, 111, 0, 524297, 536871023, 0, 524298, 536870941, 0, 524299, 29, 0, 524300, 111, 0, 524301, 1610612847, 0, 524302, 536870941, 0, 524303, 105, 0, 524304, 110, 0, 589824, 103, 0, 589825, 105, 0, 589826, 29, 0, 589827, 111, 0, 589828, 1610612847, 0, 589829, 536870942, 0, 589830, 28, 0, 589831, 30, 0, 589832, 111, 0, 589833, 536871023, 0, 589834, 536870942, 0, 589835, 30, 0, 589836, 111, 0, 589837, 1610612847, 0, 589838, 536870941, 0, 589839, 106, 0, 589840, 105, 0, 655360, 103, 0, 655361, 103, 0, 655362, 29, 0, 655363, 111, 0, 655364, 1610612852, 0, 655365, -1610612625, 0, 655366, -1610612625, 0, 655367, -1610612625, 0, 655368, -1610612620, 0, 655369, 1610612852, 0, 655370, -1610612625, 0, 655371, -1610612625, 0, 655372, -1610612620, 0, 655373, 1610612847, 0, 655374, 536870941, 0, 655375, 129, 0, 655376, 103, 0, 720896, 103, 0, 720897, 129, 0, 720898, 29, 0, 720899, -1073741698, 0, 720900, -1073741713, 0, 720901, -1073741713, 0, 720902, -1073741713, 0, 720903, -1073741713, 0, 720904, -1073741713, 0, 720905, -1073741713, 0, 720906, -1073741713, 0, 720907, -1073741713, 0, 720908, -1073741713, 0, 720909, 1610612862, 0, 720910, 536870941, 0, 720911, 105, 0, 720912, 103, 0, 786432, 110, 0, 786433, 106, 0, 786434, 129, 0, 786435, -1073741795, 0, 786436, -1073741795, 0, 786437, -1073741795, 0, 786438, -1073741795, 0, 786439, -1073741795, 0, 786440, -1073741795, 0, 786441, -1073741795, 0, 786442, -1073741795, 0, 786443, -1073741795, 0, 786444, -1073741795, 0, 786445, -1073741795, 0, 786446, 129, 0, 786447, 129, 0, 786448, 103, 0, 851968, 105, 0, 851969, 103, 0, 851970, 106, 0, 851971, 105, 0, 851972, 129, 0, 851973, 103, 0, 851974, 105, 0, 851975, 129, 0, 851976, 106, 0, 851977, 129, 0, 851978, 129, 0, 851979, 129, 0, 851980, 105, 0, 851981, 103, 0, 851982, 103, 0, 851983, 129, 0, 851984, 110, 0, 917504, 105, 0, 917505, 110, 0, 917506, 103, 0, 917507, 103, 0, 917508, 105, 0, 917509, 110, 0, 917510, 105, 0, 917511, 103, 0, 917512, 103, 0, 917513, 103, 0, 917514, 110, 0, 917515, 105, 0, 917516, 103, 0, 917517, 103, 0, 917518, 110, 0, 917519, 103, 0, 917520, 105, 0 )

[node name="Output" type="TileMap" parent="."]
tile_set = ExtResource( 1 )
cell_size = Vector2( 128, 128 )
format = 1
