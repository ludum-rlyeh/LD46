[gd_scene load_steps=3 format=2]

[ext_resource path="res://Assets/Sprites/TileMap/BG.tres" type="TileSet" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

const UP = Vector2(0.0,-1.0)
const DOWN = Vector2(0.0,1.0)
const LEFT = Vector2(-1.0,0.0)
const RIGHT = Vector2(1.0,0.0)
const DIRS = [UP, DOWN, LEFT, RIGHT]

var compatibilities = []
var weights = {}

const output_size = Vector2(10,10)
var possible_tiles
var output_matrix = []

# Called when the node enters the scene tree for the first time.
func _ready():
	randomize()
	
	# Get Input info
	var rect = $Input.get_used_rect()
	var width = rect.size.x
	var height = rect.size.y
	
	# Init weights and compatibilities
	for x in range(width) :
		for y in range(height) :
			var tile = $Input.get_cell(x,y)
			
			if tile != TileMap.INVALID_CELL: # just in case
				# Update weights
				if not tile in weights :
					weights[tile] = 0
				weights[tile] += 1
				
				# Update compatibilities
				for dir in DIRS:
					var pos = Vector2(x,y) + dir
					# Check if possible pos
					if pos.x >= 0 and pos.x < width and pos.y >= 0 and pos.y < height:
						var pos_tile = $Input.get_cell(pos.x,pos.y)
						if pos_tile != TileMap.INVALID_CELL: # just in case
							var compatibility = [tile,pos_tile,dir]
							if not compatibility in compatibilities:
								compatibilities.append([tile,pos_tile,dir])
	
	# Init output matrix
	possible_tiles = weights.keys()
	for x in range(output_size.x):
		output_matrix.append([])
		output_matrix[x] = []
		for y in range(output_size.y):
			output_matrix[x].append([])
			output_matrix[x][y] = possible_tiles.duplicate()

func _process(delta):
	update_output()
	if is_fully_collapsed():
		set_process(false)
	else:
		var pos = get_min_entropy_pos()
		# collapse possibilities at pos
		collapse(pos)
		# propagate consequences of this collapse
		propagate(pos)

# Parse matrix and return cell pos with min entropy
func get_min_entropy_pos():
	var min_entropy = INF;
	var min_entropy_pos = Vector2.ZERO;
	
	# parse positions in output matrix
	for x in range(output_size.x):
		for y in range(output_size.y):
			# If not yet collapsed
			if output_matrix[x][y].size() > 1 :
				# Get entropy
				var entropy = shannon_entropy(x,y)
				# Add some noise?
				entropy = entropy - (randf() / 1000)
				if entropy < min_entropy:
					min_entropy = entropy
					min_entropy_pos = Vector2(x,y)
	
	return min_entropy_pos

# Collapse possibilities of a pos in output matrix
func collapse(var pos):
	# Get possiblities
	var possibilities = output_matrix[pos.x][pos.y]
	
	# Get sum of possibilitiesâ€™ weights
	var sum_weights = 0.0
	for tile in possibilities:
		sum_weights += weights[tile]
	
	# Choose a tile
	var rand = randf() * sum_weights
	var chosen = null
	for tile in possibilities:
		rand -= weights[tile]
		if rand < 0 :
			chosen = tile
			break
	
	# Collapse possibilities at pos to only the chosen tile
	output_matrix[pos.x][pos.y] = [chosen]

# Propagate the consequences of a collapse (like a wave)
func propagate(var pos):
	var stack = [pos]
	while stack.size() > 0:
		# Get pos at the top of stack
		var c_pos = stack.pop_front()
		
		# Get possibile tile at pos
		var c_possibilities = output_matrix[c_pos.x][c_pos.y]
		
		# Check each directions
		for dir in DIRS :
			var o_pos = c_pos + dir
			# If pos is valid
			if o_pos.x >= 0 and o_pos.x < output_size.x and o_pos.y >= 0 and o_pos.y < output_size.y:
				# Check possibilities at o_pos
				var o_possibilities = output_matrix[o_pos.x][o_pos.y].duplicate()
				for o_tile in o_possibilities:
					# check if o_tile compatible with any tile at c_pos
					var o_tile_possible = false
					for c_tile in c_possibilities:
						if [c_tile, o_tile, dir] in compatibilities:
							o_tile_possible = true
							break
					
					# If no compatibility found
					if not o_tile_possible:
						# We collapse possibilities of o_pos
						output_matrix[o_pos.x][o_pos.y].erase(o_tile)
						
						# And we add o_pos to the stack for propagation
						if o_pos in stack:
							stack.erase(o_pos)
						stack.append(o_pos)

# Compute shannon entropy
func shannon_entropy(var x, var y):
	var sum_weights = 0.0
	var sum_weights_log_weights = 0.0
	
	# parse weights current possibilities for this position
	for tile in output_matrix[x][y]:
		var weight = weights[tile]
		sum_weights += weight
		sum_weights_log_weights += weight * log(weight)
	
	return log(sum_weights) - (sum_weights_log_weights / sum_weights)

# Check if matrix is fully collapsed or not
func is_fully_collapsed():
	for x in range(output_size.x):
		for y in range(output_size.y):
			if output_matrix[x][y].size() > 1:
				return false
	
	return true

# Update Output with collapsed tiles
func update_output():
	for x in range(output_size.x):
		for y in range(output_size.y):
			var tile = -1
			if output_matrix[x][y].size() == 1:
				tile = output_matrix[x][y][0]
			$Output.set_cell(x,y,tile)
"

[node name="TestWaveCollapse" type="Node2D"]
script = SubResource( 1 )

[node name="Input" type="TileMap" parent="."]
tile_set = ExtResource( 1 )
cell_size = Vector2( 128, 128 )
format = 1
tile_data = PoolIntArray( 0, 103, 0, 1, 103, 0, 2, 103, 0, 3, 103, 0, 65536, 103, 0, 65537, 103, 0, 65538, 103, 0, 65539, 103, 0, 131072, 103, 0, 131073, 103, 0, 131074, 103, 0, 131075, 103, 0, 196608, 103, 0, 196609, 110, 0, 196610, 110, 0, 196611, 103, 0, 262144, 110, 0, 262145, 105, 0, 262146, 105, 0, 262147, 110, 0, 327680, 105, 0, 327681, 105, 0, 327682, 105, 0, 327683, 105, 0, 393216, 105, 0, 393217, 105, 0, 393218, 105, 0, 393219, 105, 0 )

[node name="Output" type="TileMap" parent="."]
visible = false
tile_set = ExtResource( 1 )
cell_size = Vector2( 128, 128 )
format = 1
